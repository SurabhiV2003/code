import java.util.*;

class Clock {
    protected int[][] matrix;
    protected int rows, cols;

    public Clock(int[][] matrix, int rows, int cols) {
        this.matrix = matrix;
        this.rows = rows;
        this.cols = cols;
    }

    // Helper method to rotate a layer clockwise
    protected void rotateLayerClockwise() {
        int top = 0, bottom = rows - 1;
        int left = 0, right = cols - 1;

        while (top < bottom && left < right) {
            int prev = matrix[top + 1][left];

            // Top row
            for (int i = left; i <= right; i++) {
                int temp = matrix[top][i];
                matrix[top][i] = prev;
                prev = temp;
            }
            top++;

            // Right column
            for (int i = top; i <= bottom; i++) {
                int temp = matrix[i][right];
                matrix[i][right] = prev;
                prev = temp;
            }
            right--;

            // Bottom row
            for (int i = right; i >= left; i--) {
                int temp = matrix[bottom][i];
                matrix[bottom][i] = prev;
                prev = temp;
            }
            bottom--;

            // Left column
            for (int i = bottom; i >= top; i--) {
                int temp = matrix[i][left];
                matrix[i][left] = prev;
                prev = temp;
            }
            left++;
        }
    }

    // Helper method to rotate a layer anticlockwise
    protected void rotateLayerAnticlockwise() {
        int top = 0, bottom = rows - 1;
        int left = 0, right = cols - 1;

        while (top < bottom && left < right) {
            int prev = matrix[top][right - 1];

            // Right column
            for (int i = top; i <= bottom; i++) {
                int temp = matrix[i][right];
                matrix[i][right] = prev;
                prev = temp;
            }
            right--;

            // Bottom row
            for (int i = right; i >= left; i--) {
                int temp = matrix[bottom][i];
                matrix[bottom][i] = prev;
                prev = temp;
            }
            bottom--;

            // Left column
            for (int i = bottom; i >= top; i--) {
                int temp = matrix[i][left];
                matrix[i][left] = prev;
                prev = temp;
            }
            left++;

            // Top row
            for (int i = left; i <= right; i++) {
                int temp = matrix[top][i];
                matrix[top][i] = prev;
                prev = temp;
            }
            top++;
        }
    }

    protected void printMatrix() {
        for (int[] row : matrix) {
            for (int val : row)
                System.out.print(val + " ");
            System.out.println();
        }
    }
}

class Clockwise extends Clock {
    public Clockwise(int[][] matrix, int rows, int cols) {
        super(matrix, rows, cols);
    }

    public void rotate(int times) {
        for (int i = 0; i < times; i++) {
            rotateLayerClockwise();
        }
        System.out.println("Clockwise");
        printMatrix();
    }
}

class Anticlockwise extends Clock {
    public Anticlockwise(int[][] matrix, int rows, int cols) {
        super(matrix, rows, cols);
    }

    public void rotate(int times) {
        for (int i = 0; i < times; i++) {
            rotateLayerAnticlockwise();
        }
        System.out.println("Anti clockwise");
        printMatrix();
    }
}

class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int rows = Integer.parseInt(sc.nextLine());
        int cols = Integer.parseInt(sc.nextLine());

        = 0; i < rows; i++) {
            String[] line = sc.nextLine().split(" ");
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = Integer.parseInt(line[j]);
            }
        }

        int rotations = Integer.parseInt(sc.nextLine());

        // Deep copy for separate rotations
        int[][] matrixCW = new int[rows][cols];
        int[][] matrixACW = new int[rows][cols];
        for (int i = 0; i < rows; i++) {
            System.arraycopy(matrix[i], 0, matrixCW[i], .arraycopy(matrix[i], 0, matrixACW[i], 0, cols);
        }

        Clockwise cw = new Clockwise(matrixCW, rows, cols);
        cw.rotate(rotations);

        Anticlockwise acw = new Anticlockwise(matrixACW, rows, cols);
        acw.rotate(rotations);
    }
}
